// *** --- MONSTERS --- *** //

  // *** --- MONSTER OBJECT PROPERTIES LIST
    // Base Stats
    var monsterStatsList = ["strength", "health", "stamina", "magic", "resilience", "rarity"]
    var rarityStat = ["common", "uncommon", "rare", "legendary"]
    var strengthStatBase = Math.floor(Math.random() * 5) + 1 // random number 1 - 5
    var healthStatBase = Math.floor(Math.random() * 50) + 1 // random number 1 - 50
    var staminaStatBase = Math.floor(Math.random() * 10) + 1 // random number 1 - 10
    var magicStatBase = Math.floor(Math.random() * 11) // random number 0 - 10
    var resilienceStatBase = Math.floor(Math.random() * 10) + 1 // random number 1 - 5

    // Working Stats
    var strength
    var health
    var stamina
    var magic
    var resilience

    // Classes & Types
    var monsterClasses = ["pest", "creature", "demon", "elder god"]

    // Familiar
    var heroFamiliar



  // *** --- RANDOM MONSTER GENERATOR SCRIPTS

  function rollStatsForMonster() {

    rollBaseStats(); // will define standard base stats in format ___BaseStat
    rollMonsterType(); // will return generated monsterClass & generated monsterType
    rollRarity(); // will return generated rarity


    if (monsterClass == "pest") {
      strength = strengthStatBase
      health = healthStatBase
      stamina = staminaStatBase - 1
      magic = magicStatBase + 1
      resilience = resilienceStatBase + 1


        // add more internal conditionals testing if the index of pestMonsters selected is in the lower, middle, or upper third...this will be to affect final random stats.

    } // end of if pest

    if (monsterClass == "creature") {
      strength = strengthStatBase + 5
      health = healthStatBase + 25
      stamina = staminaStatBase + 4
      magic = magicStatBase - 1
      resilience = resilienceStatBase + 10


        // add more internal conditionals testing if the index of pestMonsters selected is in the lower, middle, or upper third...this will be to affect final random stats.

    } // end of if creature

    if (monsterClass == "demon") {
      strength = strengthStatBase + 10
      health = healthStatBase + 75
      stamina = staminaStatBase + 4
      magic = magicStatBase + 10
      resilience = resilienceStatBase + 7



        // add more internal conditionals testing if the index of pestMonsters selected is in the lower, middle, or upper third...this will be to affect final random stats.

    } // end of if demon

    if (monsterClass == "elder god") {
      strength = strengthStatBase + 30
      health = healthStatBase + 150
      stamina = staminaStatBase + 20
      magic = magicStatBase + 25
      resilience = resilienceStatBase + 20


        // add more internal conditionals testing if the index of pestMonsters selected is in the lower, middle, or upper third...this will be to affect final random stats.


    } // end of if elder god

    // ADJUST STATS BASED ON RARITY
    if (rarity == "legendary") {
      strength = strength + 15
      health = health + 50
      stamina = stamina + 8
      magic = magic + 10
      resilience = resilience + 5
    } else if (rarity == "rare") {
      strength = strength + 8
      health = health + 25
      stamina = stamina + 5
      magic = magic + 5
      resilience = resilience + 3
    } else if (rarity == "uncommon") {
      strength = strength + 3
      health = health + 15
      stamina = stamina + 2
      magic = magic + 2
      resilience = resilience + 1
    } // common value stays as the stat generated by adjusting for class & type

    console.log("STATS:")
    console.log("STRENGTH: " + strength + ", " + "HEALTH: " + health + ", " + "STAMINA: " + stamina + ", " + "MAGIC: " + magic + ", " + "RESILIENCE: " + resilience + ".");

  }



  // *** --- FINAL FAMILIAR OBJECT
  function familiar() {
      this.name = rarity + " " + monsterType
      this.type = monsterType;
      this.class = monsterClass;
      this.strength = strength;
      this.health = health;
      this.stamina = stamina;
      this.magic = magic;
      this.resilience = resilience;
  }


// SUMMON FAMILIAR
  function summonFamiliar() {
    rollStatsForMonster();
    var name = rarity + " " + monsterType

    console.log("You have generated a(n) " + rarity.toUpperCase() + " " + monsterType.toUpperCase() + " in the class of " + monsterClass.toUpperCase() + ".");

    var newFamiliar = new familiar(name, monsterType, monsterClass, strength, health, stamina, magic, resilience);
    heroFamiliar = newMonster
    return heroFamiliar
  }
